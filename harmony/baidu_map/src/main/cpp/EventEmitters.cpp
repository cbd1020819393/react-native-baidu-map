/**
 * MIT License
 *
 * Copyright (C) 2024 Huawei Device Co., Ltd.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GenerateEventEmitterCpp.js
 */

#include "EventEmitters.h"


namespace facebook {
namespace react {

void BaiduMapOverlayMarkerEventEmitter::onClick(OnClick $event) const {
  dispatchEvent("click", [$event=std::move($event)](jsi::Runtime &runtime) {
    auto $payload = jsi::Object(runtime);
    {
  auto position = jsi::Object(runtime);
  position.setProperty(runtime, "latitude", $event.position.latitude);
  position.setProperty(runtime, "longitude", $event.position.longitude);
  $payload.setProperty(runtime, "position", position);
}
$payload.setProperty(runtime, "title", $event.title);
    return $payload;
  });
}

void BaiduMapViewEventEmitter::onMapStatusChangeStart(OnMapStatusChangeStart $event) const {
  dispatchEvent("mapStatusChangeStart", [](jsi::Runtime &runtime) {
    auto $payload = jsi::Object(runtime);
    
    return $payload;
  });
}

void BaiduMapViewEventEmitter::onMapStatusChange(OnMapStatusChange $event) const {
  dispatchEvent("mapStatusChange", [$event=std::move($event)](jsi::Runtime &runtime) {
    auto $payload = jsi::Object(runtime);
    $payload.setProperty(runtime, "overlook", $event.overlook);
{
  auto target = jsi::Object(runtime);
  target.setProperty(runtime, "latitude", $event.target.latitude);
  target.setProperty(runtime, "longitude", $event.target.longitude);
  $payload.setProperty(runtime, "target", target);
}
    return $payload;
  });
}


void BaiduMapViewEventEmitter::onMapStatusChangeFinish(OnMapStatusChangeFinish $event) const {
  dispatchEvent("mapStatusChangeFinish", [](jsi::Runtime &runtime) {
    auto $payload = jsi::Object(runtime);
    
    return $payload;
  });
}


void BaiduMapViewEventEmitter::onMapLoaded(OnMapLoaded $event) const {
  dispatchEvent("mapLoaded", [](jsi::Runtime &runtime) {
    auto $payload = jsi::Object(runtime);
    
    return $payload;
  });
}


void BaiduMapViewEventEmitter::onMapClick(OnMapClick $event) const {
  dispatchEvent("mapClick", [$event=std::move($event)](jsi::Runtime &runtime) {
    auto $payload = jsi::Object(runtime);
    $payload.setProperty(runtime, "latitude", $event.latitude);
$payload.setProperty(runtime, "longitude", $event.longitude);
    return $payload;
  });
}


void BaiduMapViewEventEmitter::onMapDoubleClick(OnMapDoubleClick $event) const {
  dispatchEvent("mapDoubleClick", [](jsi::Runtime &runtime) {
    auto $payload = jsi::Object(runtime);
    
    return $payload;
  });
}


void BaiduMapViewEventEmitter::onMarkerClick(OnMarkerClick $event) const {
  dispatchEvent("markerClick", [$event=std::move($event)](jsi::Runtime &runtime) {
    auto $payload = jsi::Object(runtime);
    {
  auto position = jsi::Object(runtime);
  position.setProperty(runtime, "latitude", $event.position.latitude);
  position.setProperty(runtime, "longitude", $event.position.longitude);
  $payload.setProperty(runtime, "position", position);
}
$payload.setProperty(runtime, "title", $event.title);
    return $payload;
  });
}


void BaiduMapViewEventEmitter::onMapPoiClick(OnMapPoiClick $event) const {
  dispatchEvent("mapPoiClick", [](jsi::Runtime &runtime) {
    auto $payload = jsi::Object(runtime);
    
    return $payload;
  });
}

} // namespace react
} // namespace facebook
