/**
 * MIT License
 *
 * Copyright (C) 2024 Huawei Device Co., Ltd.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
 * This code was generated by "react-native codegen-harmony"
 *
 * Do not edit this file as changes may cause incorrect behavior and will be
 * lost once the code is regenerated.
 *
 * @generatorVersion: 2
 */
#include "NativeTurboModule.h"

namespace rnoh {
using namespace facebook;

NativeTurboModule::NativeTurboModule(const ArkTSTurboModule::Context ctx, const std::string name) : ArkTSTurboModule(ctx, name) {
    methodMap_ = {
        ARK_METHOD_METADATA(openDrivingRoute, 2),
        ARK_METHOD_METADATA(openTransitRoute, 2),
        ARK_METHOD_METADATA(openWalkNavi, 2),
        ARK_METHOD_METADATA(initSDK, 1),
        ARK_ASYNC_METHOD_METADATA(hasLocationPermission, 0),
        ARK_ASYNC_METHOD_METADATA(reverseGeoCode, 2),
        ARK_ASYNC_METHOD_METADATA(reverseGeoCodeGPS, 2),
        ARK_ASYNC_METHOD_METADATA(geocode, 2),
        ARK_ASYNC_METHOD_METADATA(getCurrentPosition, 1),
        ARK_METHOD_METADATA(startLocating, 2),
        ARK_METHOD_METADATA(stopLocating, 0),
        ARK_ASYNC_METHOD_METADATA(getLocationDistance, 2),
    };
}

} // namespace rnoh
