/**
 * MIT License
 *
 * Copyright (C) 2024 Huawei Device Co., Ltd.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
#pragma once

/**
 * This code was generated by "react-native codegen-harmony"
 *
 * Do not edit this file as changes may cause incorrect behavior and will be
 * lost once the code is regenerated.
 *
 * @generatorVersion: 1
 */

#include "RNOHCorePackage/ComponentBinders/ViewComponentJSIBinder.h"

namespace rnoh {
class BaiduMapViewJSIBinder : public ViewComponentJSIBinder {
  protected:
    facebook::jsi::Object createNativeProps(facebook::jsi::Runtime &rt) override {
        auto object = ViewComponentJSIBinder::createNativeProps(rt);
        object.setProperty(rt, "zoomControlsVisible", true);
        object.setProperty(rt, "trafficEnabled", true);
        object.setProperty(rt, "baiduHeatMapEnabled", true);
        object.setProperty(rt, "zoomGesturesEnabled", true);
        object.setProperty(rt, "scrollGesturesEnabled", true);
        object.setProperty(rt, "mapType", true);
        object.setProperty(rt, "zoom", true);
        object.setProperty(rt, "showsUserLocation", true);
        object.setProperty(rt, "locationData", "Object");
        object.setProperty(rt, "center", "Object");
        return object;
    }

    facebook::jsi::Object createBubblingEventTypes(facebook::jsi::Runtime &rt) override {
        facebook::jsi::Object events(rt);
        return events;
    }

    facebook::jsi::Object createDirectEventTypes(facebook::jsi::Runtime &rt) override {
        facebook::jsi::Object events(rt);
        events.setProperty(rt, "topMapStatusChangeStart", createDirectEvent(rt, "onMapStatusChangeStart"));
        events.setProperty(rt, "topMapStatusChange", createDirectEvent(rt, "onMapStatusChange"));
        events.setProperty(rt, "topMapStatusChangeFinish", createDirectEvent(rt, "onMapStatusChangeFinish"));
        events.setProperty(rt, "topMapLoaded", createDirectEvent(rt, "onMapLoaded"));
        events.setProperty(rt, "topMapClick", createDirectEvent(rt, "onMapClick"));
        events.setProperty(rt, "topMapDoubleClick", createDirectEvent(rt, "onMapDoubleClick"));
        events.setProperty(rt, "topMarkerClick", createDirectEvent(rt, "onMarkerClick"));
        events.setProperty(rt, "topMapPoiClick", createDirectEvent(rt, "onMapPoiClick"));
        return events;
    }
};
} // namespace rnoh
