/**
 * MIT License
 *
 * Copyright (C) 2024 Huawei Device Co., Ltd.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GeneratePropsCpp.js
 */

#include "Props.h"
#include <react/renderer/core/PropsParserContext.h>
#include <react/renderer/core/propsConversions.h>

namespace facebook {
namespace react {

BaiduMapOverlayArcProps::BaiduMapOverlayArcProps(
    const PropsParserContext &context,
    const BaiduMapOverlayArcProps &sourceProps,
    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),

    dash(convertRawProp(context, rawProps, "dash", sourceProps.dash, {false})),
    stroke(convertRawProp(context, rawProps, "stroke", sourceProps.stroke, {})),
    points(convertRawProp(context, rawProps, "points", sourceProps.points, {}))
      {}
BaiduMapOverlayCircleProps::BaiduMapOverlayCircleProps(
    const PropsParserContext &context,
    const BaiduMapOverlayCircleProps &sourceProps,
    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),

    radius(convertRawProp(context, rawProps, "radius", sourceProps.radius, {0.0})),
    fillColor(convertRawProp(context, rawProps, "fillColor", sourceProps.fillColor, {})),
    stroke(convertRawProp(context, rawProps, "stroke", sourceProps.stroke, {})),
    center(convertRawProp(context, rawProps, "center", sourceProps.center, {}))
      {}
BaiduMapOverlayClusterProps::BaiduMapOverlayClusterProps(
    const PropsParserContext &context,
    const BaiduMapOverlayClusterProps &sourceProps,
    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps)

    
      {}
BaiduMapOverlayHeatMapProps::BaiduMapOverlayHeatMapProps(
    const PropsParserContext &context,
    const BaiduMapOverlayHeatMapProps &sourceProps,
    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),

    points(convertRawProp(context, rawProps, "points", sourceProps.points, {})),
    gradient(convertRawProp(context, rawProps, "gradient", sourceProps.gradient, {}))
      {}
BaiduMapOverlayInfoWindowProps::BaiduMapOverlayInfoWindowProps(
    const PropsParserContext &context,
    const BaiduMapOverlayInfoWindowProps &sourceProps,
    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),

    offsetY(convertRawProp(context, rawProps, "offsetY", sourceProps.offsetY, {0.0}))
      {}
BaiduMapOverlayMarkerIconProps::BaiduMapOverlayMarkerIconProps(
    const PropsParserContext &context,
    const BaiduMapOverlayMarkerIconProps &sourceProps,
    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps)

    
      {}
BaiduMapOverlayMarkerProps::BaiduMapOverlayMarkerProps(
    const PropsParserContext &context,
    const BaiduMapOverlayMarkerProps &sourceProps,
    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),

    title(convertRawProp(context, rawProps, "title", sourceProps.title, {})),
    titleOffsetY(convertRawProp(context, rawProps, "titleOffsetY", sourceProps.titleOffsetY, {0.0})),
    location(convertRawProp(context, rawProps, "location", sourceProps.location, {})),
    perspective(convertRawProp(context, rawProps, "perspective", sourceProps.perspective, {false})),
    flat(convertRawProp(context, rawProps, "flat", sourceProps.flat, {false})),
    rotate(convertRawProp(context, rawProps, "rotate", sourceProps.rotate, {0.0})),
    icon(convertRawProp(context, rawProps, "icon", sourceProps.icon, {})),
    animateType(convertRawProp(context, rawProps, "animateType", sourceProps.animateType, {})),
    alpha(convertRawProp(context, rawProps, "alpha", sourceProps.alpha, {0.0})),
    pinColor(convertRawProp(context, rawProps, "pinColor", sourceProps.pinColor, {}))
      {}
BaiduMapOverlayPolygonProps::BaiduMapOverlayPolygonProps(
    const PropsParserContext &context,
    const BaiduMapOverlayPolygonProps &sourceProps,
    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),

    fillColor(convertRawProp(context, rawProps, "fillColor", sourceProps.fillColor, {})),
    stroke(convertRawProp(context, rawProps, "stroke", sourceProps.stroke, {})),
    points(convertRawProp(context, rawProps, "points", sourceProps.points, {}))
      {}
BaiduMapOverlayPolylineProps::BaiduMapOverlayPolylineProps(
    const PropsParserContext &context,
    const BaiduMapOverlayPolylineProps &sourceProps,
    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),

    stroke(convertRawProp(context, rawProps, "stroke", sourceProps.stroke, {})),
    points(convertRawProp(context, rawProps, "points", sourceProps.points, {}))
      {}
BaiduMapOverlayTextProps::BaiduMapOverlayTextProps(
    const PropsParserContext &context,
    const BaiduMapOverlayTextProps &sourceProps,
    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),

    text(convertRawProp(context, rawProps, "text", sourceProps.text, {})),
    fontSize(convertRawProp(context, rawProps, "fontSize", sourceProps.fontSize, {0.0})),
    fontColor(convertRawProp(context, rawProps, "fontColor", sourceProps.fontColor, {})),
    bgColor(convertRawProp(context, rawProps, "bgColor", sourceProps.bgColor, {})),
    rotate(convertRawProp(context, rawProps, "rotate", sourceProps.rotate, {0.0})),
    location(convertRawProp(context, rawProps, "location", sourceProps.location, {}))
      {}
BaiduMapViewProps::BaiduMapViewProps(
    const PropsParserContext &context,
    const BaiduMapViewProps &sourceProps,
    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),

    zoomControlsVisible(convertRawProp(context, rawProps, "zoomControlsVisible", sourceProps.zoomControlsVisible, {false})),
    trafficEnabled(convertRawProp(context, rawProps, "trafficEnabled", sourceProps.trafficEnabled, {false})),
    baiduHeatMapEnabled(convertRawProp(context, rawProps, "baiduHeatMapEnabled", sourceProps.baiduHeatMapEnabled, {false})),
    zoomGesturesEnabled(convertRawProp(context, rawProps, "zoomGesturesEnabled", sourceProps.zoomGesturesEnabled, {false})),
    scrollGesturesEnabled(convertRawProp(context, rawProps, "scrollGesturesEnabled", sourceProps.scrollGesturesEnabled, {false})),
    mapType(convertRawProp(context, rawProps, "mapType", sourceProps.mapType, {0.0})),
    zoom(convertRawProp(context, rawProps, "zoom", sourceProps.zoom, {0.0})),
    showsUserLocation(convertRawProp(context, rawProps, "showsUserLocation", sourceProps.showsUserLocation, {false})),
    locationData(convertRawProp(context, rawProps, "locationData", sourceProps.locationData, {})),
    center(convertRawProp(context, rawProps, "center", sourceProps.center, {}))
      {}

} // namespace react
} // namespace facebook
